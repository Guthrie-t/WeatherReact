{"version":3,"sources":["utilities/googleMaps.js","components/ZipForm.js","utilities/dates.js","components/WeatherListItem.js","components/WeatherList.js","components/CurrentDay.js","components/App.js","reportWebVitals.js","index.js"],"names":["apiKey","geocodeUrl","zipcode","a","fetch","response","ok","Error","status","json","ZipForm","props","state","inputChanged","bind","submitZipCode","className","id","onSubmit","this","htmlFor","type","name","value","required","onChange","event","target","setState","preventDefault","Component","getDate","unixTimestamp","timezoneOffset","Date","getWeekday","date","getDay","WeatherListItem","onClick","forecastDay","dt","weekday","getMonth","temp","min","toFixed","max","onDayClicked","index","WeatherList","forecastDays","map","CurrentDay","city","day","src","weather","icon","alt","description","morn","eve","night","pressure","humidity","wind_speed","App","forecast","selectedDate","url","apikey","onFormSubmit","getLocation","then","data","results","address_components","long_name","lat","geometry","location","lng","get","timezone_offset","daily","splice","catch","error","alert","dayIndex","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4204dd29.chunk.js","sourcesContent":["// Utility functions that work with google geocode api\r\n\r\n// sample api call\r\n// https://maps.googleapis.com/maps/api/geocode/json?address=97405&region=us&key=AIzaSyDiETC291N6N3E3oYPITjnS8JjDEHQIBv4\r\n\r\n// sample response as json\r\n/*\r\n{\r\n   \"results\" : [\r\n      {\r\n         \"address_components\" : [\r\n            {\r\n               \"long_name\" : \"97405\",\r\n               \"short_name\" : \"97405\",\r\n               \"types\" : [ \"postal_code\" ]\r\n            },\r\n            {\r\n               \"long_name\" : \"Eugene\",\r\n               \"short_name\" : \"Eugene\",\r\n               \"types\" : [ \"locality\", \"political\" ]\r\n            },\r\n            {\r\n               \"long_name\" : \"Lane County\",\r\n               \"short_name\" : \"Lane County\",\r\n               \"types\" : [ \"administrative_area_level_2\", \"political\" ]\r\n            },\r\n            {\r\n               \"long_name\" : \"Oregon\",\r\n               \"short_name\" : \"OR\",\r\n               \"types\" : [ \"administrative_area_level_1\", \"political\" ]\r\n            },\r\n            {\r\n               \"long_name\" : \"United States\",\r\n               \"short_name\" : \"US\",\r\n               \"types\" : [ \"country\", \"political\" ]\r\n            }\r\n         ],\r\n         \"formatted_address\" : \"Eugene, OR 97405, USA\",\r\n         \"geometry\" : {\r\n            \"bounds\" : {\r\n               \"northeast\" : {\r\n                  \"lat\" : 44.040783,\r\n                  \"lng\" : -122.941963\r\n               },\r\n               \"southwest\" : {\r\n                  \"lat\" : 43.8140499,\r\n                  \"lng\" : -123.3366001\r\n               }\r\n            },\r\n            \"location\" : {\r\n               \"lat\" : 43.9697922,\r\n               \"lng\" : -123.2005853\r\n            },\r\n            \"location_type\" : \"APPROXIMATE\",\r\n            \"viewport\" : {\r\n               \"northeast\" : {\r\n                  \"lat\" : 44.040783,\r\n                  \"lng\" : -122.941963\r\n               },\r\n               \"southwest\" : {\r\n                  \"lat\" : 43.8140499,\r\n                  \"lng\" : -123.3366001\r\n               }\r\n            }\r\n         },\r\n         \"place_id\" : \"ChIJfbVn2e4iwVQRFHAnUlfzC8Q\",\r\n         \"types\" : [ \"postal_code\" ]\r\n      }\r\n   ],\r\n   \"status\" : \"OK\"\r\n}\r\n*/\r\n\r\n// my api key - replace this with yours!\r\nconst apiKey = \"AIzaSyDiETC291N6N3E3oYPITjnS8JjDEHQIBv4\";\r\n\r\n// url pattern for api call\r\nconst geocodeUrl = \"https://maps.googleapis.com/maps/api/geocode/json?region=us&address=\";\r\n\r\n// returns a promise of api data - see sample data above\r\nexport default async function (zipcode) {\r\n    let response = await fetch(`${geocodeUrl}${zipcode}&key=${apiKey}`);\r\n    \r\n    if (!response.ok)\r\n        throw new Error(`API call failed. ${response.status}`);\r\n    else \r\n        return await response.json();\r\n\r\n}","import React, { Component } from 'react';\n\nclass ZipForm extends Component {\n  constructor (props) {\n    super(props);\n    this.state = {\n      zipcode:\"\"\n    };\n    this.inputChanged = this.inputChanged.bind(this);\n    this.submitZipCode = this.submitZipCode.bind(this);\n  }\n\n  render() {\n    return (\n      <div className=\"zip-form\">\n        <form id=\"zipForm\" onSubmit={this.submitZipCode}>\n          <div className=\"flex-parent\">\n            <label htmlFor=\"zipcode\">Zip</label>\n            <input className=\"form-control\"\n              type=\"input\" id=\"zipcode\" name=\"zipcode\"\n              value={this.state.zipcode} required\n              onChange={this.inputChanged}\n            />\n            <button type=\"submit\" className=\"btn btn-success\"> Get the forecast!</button>\n          </div>\n        </form>\n      </div>\n    );\n  }\n\n  inputChanged(event) {\n    const {value} = event.target;\n    this.setState({zipcode: value});\n  }\n\n submitZipCode(event) {\n   event.preventDefault(); //don't submit the form\n   const { zipcode } = this.state; //get the zip\n   const { onSubmit } = this.props //this comes from App.js because parent-child\n   onSubmit(zipcode); //the form calls a method on the App and passes the zipcode\n   this.setState({zipcode: \"\"}); //clear the zipcode here in Zipform (and clear the webpage)\n }\n}\n\nexport default ZipForm;\n","// Utility functions that manipulate JS dates\r\n\r\n// returns a JS date object based on a unix timestamp and the timezone offset\r\nexport function getDate(unixTimestamp, timezoneOffset) {\r\n    return new Date((unixTimestamp - timezoneOffset) * 1000);\r\n}\r\n\r\n// returns a string that represents the day of the week based on a JS date object\r\nexport function getWeekday(date) {\r\n    const dayNames = ['Sunday','Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\r\n    const weekday = date.getDay();\r\n    return dayNames[weekday];\r\n}","import React, { Component } from 'react';\nimport { getDate, getWeekday } from '../utilities/dates';\n\nclass WeatherListItem extends Component {\n  constructor(props) {\n    super(props);\n    this.onClick = this.onClick.bind(this);\n  }\n\n  render() {\n    const { forecastDay, timezoneOffset } = this.props;\n    const date = getDate(forecastDay.dt, timezoneOffset);\n    const weekday = getWeekday(date);\n    return (\n      <div className=\"weather-list-item\" onClick={this.onClick}>\n        <h2>{date.getMonth() + 1} / {date.getDate()}</h2><h3>{weekday}</h3>\n        <h3 className=\"low\">{forecastDay.temp.min.toFixed(1)}&deg;F </h3>\n        <h3 className=\"high\">{forecastDay.temp.max.toFixed(1)}&deg;F </h3>\n      </div>\n    );\n  }\n\n\n  onClick() {\n    const { onDayClicked, index } = this.props;\n    onDayClicked(index);\n  }\n}\n\nexport default WeatherListItem;\n","import React, { Component } from 'react';\nimport WeatherListItem from './WeatherListItem';\n\nclass WeatherList extends Component {\n  constructor (props) {\n    super(props);\n    this.state = {};\n  }\n\n  render() {\n    const { forecastDays, timezoneOffset, onDayClicked } = this.props;\n    return (\n      <div className=\"weather-list flex-parent\">\n        {forecastDays.map((forecastDay, index) =>\n          <WeatherListItem key={forecastDay.dt}\n            forecastDay={forecastDay} index={index}\n            timezoneOffset={timezoneOffset} \n            onDayClicked={onDayClicked}\n            />\n        )}        \n      </div>\n    );\n  }\n}\n\nexport default WeatherList;\n","import React, { Component } from 'react';\nimport { getDate, getWeekday } from '../utilities/dates';\n\nclass CurrentDay extends Component {\n  constructor (props) {\n    super(props);\n    this.state = {};\n  }\n\n  render () {\n\n    const { city, forecastDay: day, timezoneOffset } = this.props;\n    const date = getDate(day.dt, timezoneOffset);\n    const weekday = getWeekday(date);\n      \n    return (\n        <div className=\"current-day\">\n          <h1 className=\"day-header\">{weekday} in {city.name}</h1>\n          <div className=\"weather\">\n          <p>\n              <img src={`http://openweathermap.org/img/w/${day.weather[0].icon}.png`} alt={day.weather[0].description}/>\n              {day.weather[0].description}\n          </p>\n        </div>\n        <div className=\"details flex-parent\">\n          <div className=\"temperature-breakdown\">\n            <p>Morning Temperature: {day.temp.morn}&deg;F</p>\n            <p>Day Temperature: {day.temp.day}&deg;F</p>\n            <p>Evening Temperature: {day.temp.eve}&deg;F</p>\n            <p>Night Temperature: {day.temp.night}&deg;F</p>\n          </div>\n          <div className=\"misc-details\">\n            <p>Atmospheric Pressure: {day.pressure} hPa</p>\n            <p>Humidity: {day.humidity}%</p>\n            <p>Wind Speed: {day.wind_speed} mph</p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default CurrentDay;\n","import React, { Component } from 'react';\nimport './App.css';\nimport getLocation from '../utilities/googleMaps';\nimport { get } from 'axios';\nimport ZipForm from './ZipForm';\nimport WeatherList from './WeatherList';\nimport CurrentDay from './CurrentDay';\n\n\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      zipcode: \"\",\n      city: {},\n      forecast: [],\n      selectedDate: null\n    };\n    this.url = \"https://api.openweathermap.org/data/2.5/onecall?\";\n    this.apikey = \"&exclude=minutely,hourly,current&units=imperial&appid=3f8be0d026912ae0811bba8e649ba208\";\n\n    this.onFormSubmit = this.onFormSubmit.bind(this);\n    this.onDayClicked = this.onDayClicked.bind(this);\n  }\n\n  render() {\n    const { forecast, timezoneOffset, selectedDate, city } = this.state;\n    return (\n        <div id=\"app-container\">\n          <div className=\"app\">\n            <ZipForm onSubmit={this.onFormSubmit}/>\n            <WeatherList forecastDays={forecast} \n                timezoneOffset={timezoneOffset}\n                onDayClicked={this.onDayClicked}/>\n            {selectedDate !== null && \n                <CurrentDay forecastDay={forecast[selectedDate]} \n                    city={city} timezoneOffset={timezoneOffset}/>}\n          </div>\n        </div>\n    );\n}\n  onFormSubmit(zipcode) {\n    getLocation(zipcode)\n      .then(data => {\n        const name = data.results[0].address_components[1].long_name;\n        const lat = data.results[0].geometry.location.lat;\n        const lng = data.results[0].geometry.location.lng;\n        get(`${this.url}lat=${lat}&lon=${lng}${this.apikey}`) //this get uses axios which I think is more intuitive\n          .then(({ data }) => {  //when using axios, need the data in {} because it doesn't need to be parsed as json\n            const timezoneOffset = data.timezone_offset;\n            // sometimes there are 8 days\n            data.daily.splice(7);\n            const forecast = data.daily;\n            this.setState({\n              zipcode, forecast, timezoneOffset, //written this way because the variables and property names are exactly the same\n              selectedDate: null,\n              city: { name, lat, lng }\n            });\n          })\n          .catch(error => {\n            alert('There was a problem getting weather info!');\n          });\n      })\n      .catch(error => {\n        alert('There was a problem getting location information!')\n      });\n  }\n\n  onDayClicked(dayIndex) {\n    this.setState({ selectedDate: dayIndex });\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './index.css';\nimport App from './components/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}